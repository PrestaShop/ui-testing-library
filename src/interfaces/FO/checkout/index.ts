import type FakerAddress from '@data/faker/address';
import FakerCarrier from '@data/faker/carrier';
import type FakerCustomer from '@data/faker/customer';
import {type ProductDetailsBasic} from '@data/types/product';
import {FOBasePagePageInterface} from '@interfaces/FO';
import type {Page} from '@playwright/test';

export interface FoCheckoutPageInterface extends FOBasePagePageInterface {
    personalInformationStepForm: string;
    readonly authenticationErrorMessage: string;
    readonly deleteAddressSuccessMessage: string;
    readonly messageIfYouSignOut: string;
    readonly noCarriersMessage: string;
    readonly noPaymentNeededText: string;

    addPromoCode(page: Page, code: string, clickOnCheckoutPromoCodeLink?: boolean): Promise<void>;
    chooseDeliveryAddress(page: Page, position?: number): Promise<void>;
    choosePaymentAndOrder(page: Page, paymentModuleName: string): Promise<void>;
    chooseShippingMethod(page: Page, shippingMethodID: number): Promise<void>;
    chooseShippingMethodAndAddComment(page: Page, shippingMethodID: number, comment?: string): Promise<boolean>;
    chooseShippingMethodWithoutValidation(page: Page, shippingMethodID: number, comment?: string): Promise<void>;
    clickOnAddNewAddressButton(page: Page): Promise<void>;
    clickOnAddNewInvoiceAddressButton(page: Page): Promise<void>;
    clickOnContinueButtonFromAddressStep(page: Page): Promise<boolean>;
    clickOnDifferentInvoiceAddressLink(page: Page): Promise<void>;
    clickOnEditAddress(page: Page, row?: number): Promise<void>;
    clickOnEditAddressesStep(page: Page): Promise<void>;
    clickOnEditPersonalInformationStep(page: Page): Promise<void>;
    clickOnEditShippingMethodStep(page: Page): Promise<void>;
    clickOnProductImage(page: Page, productRow: number): Promise<void>;
    clickOnProductName(page: Page, productRow: number): Promise<Page>;
    clickOnSignIn(page: Page): Promise<void>;
    clickOnShowDetailsLink(page: Page): Promise<boolean>;
    customerLogin(page: Page, customer: any): Promise<boolean>;
    deleteAddress(page: Page, row?: number): Promise<string>;
    getActiveLinkFromPersonalInformationBlock(page: Page): Promise<string>;
    getAllCarriersNames(page: Page): Promise<(string | null)[]>;
    getAllCarriersPrices(page: Page): Promise<string[]>;
    getATIPrice(page: Page): Promise<number>;
    getAvailableAddressCountries(page: Page): Promise<string[]>;
    getCarrierData(page: Page, carrierID?: number): Promise<FakerCarrier>;
    getCarrierErrorMessage(page: Page): Promise<string|null>;
    getCartRuleErrorMessage(page: Page): Promise<string>;
    getCartRuleName(page: Page, line?: number): Promise<string>;
    getCartRuleValue(page: Page, line?: number): Promise<string>;
    getCustomerIdentity(page: Page): Promise<string>;
    getDiscountCost(page: Page): Promise<string>
    getGiftPrice(page: Page): Promise<string>;
    getItemsNumber(page: Page): Promise<string>;
    getLoginError(page: Page): Promise<string>;
    getLogoutMessage(page: Page): Promise<string>;
    getNoPaymentAvailableMessage(page: Page): Promise<string>;
    getNoPaymentNeededBlockContent(page: Page): Promise<string>;
    getNumberOfAddresses(page: Page): Promise<number>;
    getNumberOfInvoiceAddresses(page: Page): Promise<number>;
    getOrderMessage(page: Page): Promise<string>;
    getProductAttributes(page: Page, productRow: number): Promise<string>;
    getProductDetails(page: Page, productRow: number): Promise<ProductDetailsBasic>;
    getSelectedShippingMethod(page: Page): Promise<string | null>;
    getShippingCost(page: Page): Promise<string>;
    getShippingMethodName(page: Page, shippingMethodID: number): Promise<string>;
    getTermsOfServicePageTitle(page: Page): Promise<string>;
    goToDeliveryStep(page: Page): Promise<boolean>;
    goToPasswordReminderPage(page: Page): Promise<void>;
    goToPaymentStep(page: Page): Promise<boolean>;
    goToShippingStep(page: Page): Promise<void>;
    isAddressFormVisible(page: Page): Promise<boolean>;
    isAddressesStep(page: Page): Promise<boolean>;
    isCheckoutPage(page: Page): Promise<boolean>;
    isConditionToApproveCheckboxVisible(page: Page): Promise<boolean>;
    isDeliveryAddressSelected(page: Page, row: number): Promise<boolean>;
    isGiftCheckboxVisible(page: Page): Promise<boolean>;
    isGiftMessageTextareaVisible(page: Page): Promise<boolean>;
    isInvoiceAddressBlockVisible(page: Page): Promise<boolean>;
    isInvoiceAddressSelected(page: Page, row: number): Promise<boolean>;
    isPasswordRequired(page: Page): Promise<boolean>;
    isPaymentConfirmationButtonVisibleAndEnabled(page: Page): Promise<boolean>;
    isPaymentMethodExist(page: Page, paymentModuleName: string): Promise<boolean>;
    isRecycledPackagingCheckboxVisible(page: Page): Promise<boolean>;
    isShippingMethodVisible(page: Page, shippingMethodID: number): Promise<boolean>;
    isStepCompleted(page: Page, stepSelector: string): Promise<boolean>;
    logOutCustomer(page: Page): Promise<boolean>;
    orderWithoutPaymentMethod(page: Page): Promise<void>;
    removePromoCode(page: Page, row?: number): Promise<boolean>;
    selectDeliveryAddress(page: Page, row?: number): Promise<void>;
    selectInvoiceAddress(page: Page, row?: number): Promise<void>;
    setAddress(page: Page, deliveryAddress: FakerAddress, invoiceAddress?: FakerAddress | null): Promise<boolean>;
    setGiftCheckBox(page: Page): Promise<void>;
    setGiftMessage(page: Page, message: string): Promise<void>;
    setGuestPersonalInformation(page: Page, customerData: FakerCustomer): Promise<boolean>;
    setInvoiceAddress(page: Page, invoiceAddress: FakerAddress): Promise<boolean>;
    setRecycledPackagingCheckbox(page: Page, toCheck?: boolean): Promise<void>;
}
